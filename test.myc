@import "utils.myc"



function print_line(:line Line) bool {
	if line.length < [uint8]0 {
		return true;
	}

	for (:i uint8 = [uint8]1; i < line.length; i = i + [uint8]1) {
		printf("%c", line.pixel);
	}
	printf("\n");
	
	false
}

// test paddings
struct Bytes6 {
	:x uint16;
	// padding of 2 bytes should be here
	:y uint32;
}

function print_bytes6(:bytes Bytes6) {
	printf("x: %hu, y: %lu\n", bytes.x, bytes.y);
}

function test_struct_paddings() {
	:s Bytes6;
	
	s.x = [uint16]111;
	s.y = [uint32]222;

	print_bytes6(s);
}

struct Bytes16 {
	:x int64;
	:y int64;
}

struct Bytes24 {
	:x int64;
	:y int64;
	:z int64;
}

struct Bytes40 {
	:x Bytes24;
	:y Bytes16;
}

function undefined_function_a(:bytes_a Bytes16, :bytes_b Bytes16) {
	printf("x: %lld, y: %lld\n", bytes_a.x, bytes_a.y);
	printf("x: %lld, y: %lld\n", bytes_b.x, bytes_b.y);
}

function undefined_function_b(:bytes Bytes24) {
	printf("x: %lld, y: %lld, z: %lld\n", bytes.x, bytes.y, bytes.z);
}

function undefined_function_c(:bytes Bytes40) {
	printf("x.x: %lld, x.y: %lld, x.z: %lld\ny.x: %lld, y.y: %lld\n",
      bytes.x.x, bytes.x.y, bytes.x.z, bytes.y.x, bytes.y.y);
}

function test_big_things() {
	:a Bytes16;
	:c Bytes16;
	:b Bytes24;

	a = Bytes16{345, 420};
	
	b.x = 69;
	b.y = 42;
	b.z = 118;
	
	c = a;

	undefined_function_a(a, c);
	printf("\n\n");
	undefined_function_b(b);

	
	:d Bytes40;

	d = Bytes40{
		Bytes24{34578, 283, 283},
		Bytes16{23, 4}
	};

	undefined_function_c(d);
}

function main() {	
	/*
	:CAP int64 = 100 / 2;

	:INCR int64 = 2;
	
	:x int64 = 0;
	:sing int64 = 1;

	while true {
 		if sing > 0 {
			x = x + INCR;
		} else {
			x = x - INCR;
		}
		if x >= CAP {
			sing = 0;
		}
		if x <= 0 {
			sing = 1;
		}

		:line Line;
		line.length = [uint8]x;
		line.pixel  = [uint8]65;
		if print_line(line) != false {
			printf("error: negative length for the line is illegal\n");
			return;
		}
	}
	*/

	test_big_things();
	test_struct_paddings();
}
