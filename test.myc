function print_line(:length int64, :x bool) bool {
	if length < 0 {
		return true;
	}

	for (:i int64 = 1; i < length; i = i + 1) {
		printf("@");
	}
	printf("\n");
	
	false
}

function main() {
	:a int64 = 69;
	:pointer_to_a *int64 = &a;

	printf("pointer_to_a:   %lld\n", pointer_to_a);
	printf("*pointer_to_a:  %lld\n", *pointer_to_a);
	printf("&pointer_to_a:  %lld\n", &pointer_to_a);
	printf("&*pointer_to_a: %lld\n", &*pointer_to_a);

	:pointer_to_pointer_to_a **int64 = &pointer_to_a;

	printf("pointer_to_pointer_to_a:    %lld\n", pointer_to_pointer_to_a);
	printf("*pointer_to_pointer_to_a:   %lld\n", *pointer_to_pointer_to_a);
	printf("**pointer_to_pointer_to_a:  %lld\n", **pointer_to_pointer_to_a);
	printf("&pointer_to_pointer_to_a:   %lld\n", &pointer_to_pointer_to_a);
	printf("&*pointer_to_pointer_to_a:  %lld\n", &*pointer_to_pointer_to_a);
	printf("&**pointer_to_pointer_to_a: %lld\n", &**pointer_to_pointer_to_a);
	

	return;

	:CAP int64 = 100 / 2;

	:INCR int64 = 2;
	
	:x int64 = 0;
	:sing int64 = 1;

	while true {
 		if sing > 0 {
			x = x + INCR;
		} else {
			x = x - INCR;
		}
		if x >= CAP {
			sing = 0;
		}
		if x <= 0 {
			sing = 1;
		}
		if print_line(x, true) != false {
			printf("error: negative length for the line is illegal\n");
			return;
		}
	}
}
