struct Line {
	:length uint8;
	:pixel  uint8;
}

function print_line(:line Line) bool {
	if line.length < [uint8]0 {
		return true;
	}

	for (:i uint8 = [uint8]1; i < line.length; i = i + [uint8]1) {
		printf("%c", line.pixel);
	}
	printf("\n");
	
	false
}



struct Bytes16 {
	:x int64;
	:y int64;
}

struct Bytes24 {
	:x int64;
	:y int64;
	:z int64;
}

struct Bytes40 {
	:x Bytes24;
	:y Bytes16;
}

function undefined_function_a(:bytes_a Bytes16, :bytes_b Bytes16) bool {
	printf("x: %lld, y: %lld\n", bytes_a.x, bytes_a.y);
	printf("x: %lld, y: %lld\n", bytes_b.x, bytes_b.y);

	false	
}

function undefined_function_b(:bytes_c Bytes24) bool {
	printf("x: %lld, y: %lld, z: %lld\n", bytes_c.x, bytes_c.y, bytes_c.z);

	false
}

function undefined_function_c(:bytes_d Bytes40) bool {
	printf("x.x: %lld, x.y: %lld, x.z: %lld\ny.x: %lld, y.y: %lld\n",
      bytes_d.x.x, bytes_d.x.y, bytes_d.x.z, bytes_d.y.x, bytes_d.y.y);

	false
}

function test_big_things() bool {
	:a Bytes16;
	:c Bytes16;
	:b Bytes24;

	a.x = 49;
	a.y = 420;
	
	c.x = 58;
	c.y = 1248;
	
	b.x = 69;
	b.y = 42;
	b.z = 118;

	undefined_function_a(a, c);
	printf("\n\n");
	undefined_function_b(b);

	
	:d Bytes40;

	d.x.x = 1;
	d.x.y = 2;
	d.x.z = 3;
	d.y.x = 4;
	d.y.y = 5;

	undefined_function_c(d);

	return false;
}

function main() {	
	/*
	:CAP int64 = 100 / 2;

	:INCR int64 = 2;
	
	:x int64 = 0;
	:sing int64 = 1;

	while true {
 		if sing > 0 {
			x = x + INCR;
		} else {
			x = x - INCR;
		}
		if x >= CAP {
			sing = 0;
		}
		if x <= 0 {
			sing = 1;
		}

		:line Line;
		line.length = [uint8]x;
		line.pixel  = [uint8]65;
		if print_line(line) != false {
			printf("error: negative length for the line is illegal\n");
			return;
		}
	}
	*/

	test_big_things();
}
