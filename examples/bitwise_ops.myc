@import "lib/c/stdio.myc"

struct A {
	:a int32;
	:b int64;
	:c int32;
	:d int32;
	:e int64;
	:f int64;
	:g string;
}
struct B {
	:a int32;
	:b A;
}

function main() {
	:a int64 = 0xFF00;
	:b int64 = 0x00FF;

	:x int64 =  ~b;

	x >= 30;
	x <= 30;
	x == 30;
	x != 30;

	printf("x before the operations : %llx\n".data, x);
	x += 30;
	x -= 30;
	x *= 30;
	x /= 30;
	x %= 30;
	x &= 30;
	x |= 30;
	x ^= 30;
	x = 1;
	x <<= 3;
	printf("x after the operations : %llx\n".data, x);

	printf("%x\n".data, a++);
	printf("%x\n".data, b--);

	true && false;
	true || false;

	printf((x * "hello, \n").data);

	// sttring equality
	:foo string = "helio!";
	:bar string = "hello!";

	if "heilo!" == "hello!" {
		printf("static is equal to static!\n".data);
	}
	if foo == "helio!" {
		printf("dynamic is equal to static!\n".data);
	}
	if bar == foo {
		printf("dynamic is equal to dynamic!\n".data);
	}

	// struct equality
	:baz B = B {
		1,
		A{
			5,
			9,
			5,
			5,
			9,
			9,
			"hey!",
		},
	};
	:quz B = B {
		1,
		A{
			5,
			9,
			5,
			5,
			9,
			9,
			"hey!",
		},
	};

	if baz == quz {
		printf("struct is equal to struct!\n".data);
	}

	printf("%s   len : %d\n".data, (foo + "hey , ").data, (foo + "hey , ").len);
	printf("%s   len : %d\n".data, ("hey , " + foo).data, ("hey , " + foo).len);
	printf("%s   len : %d\n".data, (5 * "hey!").data, (5 * "hey!").len);
	printf("%s   len : %d\n".data, ("hey!" * 5).data, ("hey!" * 5).len);
	printf("%s   len : %d\n".data, (foo * 5).data, (foo * 5).len);
	printf("%s   len : %d\n".data, (5 * foo).data, (5 * foo).len);


	//printf("len : %d\n".data, foo.len);
	for(:i int64 = 0; i < [int64]foo.len; i++) {
		printf("%hhx".data, foo[i]);
	}

	printf("%llx\n".data, 0xFF << 3);
	printf("%llx\n".data, 0xF0 >> 2);
}
