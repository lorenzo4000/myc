@import "lib/c/stdio.myc"
@import "lib/memory.myc"


//  struct pollfd {
//      int   fd;         /* file descriptor */
//      short events;     /* requested events */
//      short revents;    /* returned events */
//  };
struct pollfd {
	:fd int32;
	:events int16;
	:revents int16;
}


//  int poll(struct pollfd *fds, nfds_t nfds, int timeout);
function poll(:fds *pollfd, :nfds int32, :timeout int32) external;


//  ssize_t read(int fd, void *buf, size_t count);
function read(:fd int32, :buf *?, :count uint64) external;


//  unsigned int sleep(unsigned int seconds);
function sleep(:seconds uint32) external;


//	#define NCCS 32
//	struct termios
//	  {
//		tcflag_t c_iflag;		/* input mode flags */
//		tcflag_t c_oflag;		/* output mode flags */
//		tcflag_t c_cflag;		/* control mode flags */
//		tcflag_t c_lflag;		/* local mode flags */
//		cc_t c_line;			/* line discipline */
//		cc_t c_cc[NCCS];		/* control characters */
//		speed_t c_ispeed;		/* input speed */
//		speed_t c_ospeed;		/* output speed */
//	#define _HAVE_STRUCT_TERMIOS_C_ISPEED 1
//	#define _HAVE_STRUCT_TERMIOS_C_OSPEED 1
//	  };
struct termios {
	:c_iflag		uint32;/* input mode flags */
	:c_oflag		uint32;/* output mode flags */
	:c_cflag		uint32;/* control mode flags */
	:c_lflag		uint32;/* local mode flags */
	:c_line			uint8 ;	/* line discipline */
	:c_cc		    [32]uint8 ;	/* control characters */
	:c_ispeed		uint32;/* input speed */
	:c_ospeed		uint32;/* output speed */
}

function tcgetattr(:fd int32, :__termios_p *termios) external;
function tcsetattr(:fd int32, :__optional_actions int32, :__termios_p *termios) external;

function render(:screen [][30]uint8, :rainbow bool) {
	// clear terminal
	printf("\033[2J".data);

	:color_k uint8 = [uint8]0;
	:color_v uint8 = [uint8]0;


	:screen_size int64 = [int64]screen.len / 30;
	for(:i int64 = 0; i < screen_size; i = i + 1) {
		for(:j int64 = 0; j < [int64]screen[i].len; j = j + 1) {
			if rainbow {
				if color_k >= [uint8]6 {
					color_k = [uint8]0;
					color_v = color_v + [uint8]1;
				}
				if color_v >= [uint8]4 {
					color_v = [uint8]0;
				}

				:color uint8 = [uint8]46 + color_k + color_v * [uint8]6 * [uint8]6;

				color_k = color_k + [uint8]1;

				printf("\033[1m".data);
				printf("\033[38:5:%hhdm".data, color);
			}

			putchar(screen[i][j]);

			// restore terminal
			printf("\033[0m".data);
		}
		putchar(10);
	}
}

function main() {
	:impiccatos [8][10]string = [8][10]string{
		[10]string{
			"                              ",
			"            ---------|        ",
			"            O        |        ",
			"           /|\\       |        ",
			"            X        |        ",
			"           / \\       |        ",
			"                  ___|___     ",
			"                              ",
			"                              ",
			"                              ",
		},
		[10]string{
			"                              ",
			"            ---------|        ",
			"            O        |        ",
			"           /|\\       |        ",
			"            X        |        ",
			"             \\       |        ",
			"                  ___|___     ",
			"                              ",
			"                              ",
			"                              ",
		},
		[10]string{
			"                              ",
			"            ---------|        ",
			"            O        |        ",
			"           /|\\       |        ",
			"            X        |        ",
			"                     |        ",
			"                  ___|___     ",
			"                              ",
			"                              ",
			"                              ",
		},
		[10]string{
			"                              ",
			"            ---------|        ",
			"            O        |        ",
			"           /|\\       |        ",
			"                     |        ",
			"                     |        ",
			"                  ___|___     ",
			"                              ",
			"                              ",
			"                              ",
		},
		[10]string{
			"                              ",
			"            ---------|        ",
			"            O        |        ",
			"            |\\       |        ",
			"                     |        ",
			"                     |        ",
			"                  ___|___     ",
			"                              ",
			"                              ",
			"                              ",
		},
		[10]string{
			"                              ",
			"            ---------|        ",
			"            O        |        ",
			"            |        |        ",
			"                     |        ",
			"                     |        ",
			"                  ___|___     ",
			"                              ",
			"                              ",
			"                              ",
		},
		[10]string{
			"                              ",
			"            ---------|        ",
			"            O        |        ",
			"                     |        ",
			"                     |        ",
			"                     |        ",
			"                  ___|___     ",
			"                              ",
			"                              ",
			"                              ",
		},
		[10]string{
			"                              ",
			"            ---------|        ",
			"                     |        ",
			"                     |        ",
			"                     |        ",
			"                     |        ",
			"                  ___|___     ",
			"                              ",
			"                              ",
			"                              ",
		},
	};


	:win_screen [4][10]string = [4][10]string{
		[10]string{
			"\\\\\\\\\\  ===/// ==\\||  ==|   || ",
			"\\\\\\\\\\\\ ==/||  ==|||  ==|   || ",
			"\\\\\\\\\\\\\\=/|||  ==|||  ==|   || ",
			"\\\\\\\\\\\\\\| |||  ==|||  ==|   || ",
			"-------| \\\\\\ ==/\\\\\\ ===|   || ",
			"                           || ",
			"\\\\    ^   ==/// == \\|\\ ==| || ",
			"\\\\\\ ==/\\ ==/|||  ==||\\\\ =|    ",
			"\\\\\\\\=/  \\=/ |||  ==|| \\\\=| \\/ ",
			"\\\\\\\\/    v   \\\\ == /|  \\\\| /\\ ",
		},
		[10]string{
			"\\\\\\\\\\  ===/// ==\\||  ==|   || ",
			"\\\\\\\\\\\\ ==/||  ==|||  ==|   || ",
			"\\\\\\\\\\\\\\=/|||  ==|||  ==|   || ",
			"\\\\\\\\\\\\\\| |||  ==|||  ==|   || ",
			"-------| \\\\\\ ==/\\\\\\ ===|   || ",
			"                           || ",
			"\\\\\\\\    ^   ==/ == \\|\\ ==| || ",
			"\\\\\\\\\\ ==/\\ ==/|  ==||\\\\ =|    ",
			"\\\\\\\\\\\\=/  \\=/ |  ==|| \\\\=| \\/ ",
			"\\\\\\\\\\\\/    v \\\\ == /|  \\\\| /\\ ",
		},
		[10]string{
			"\\\\\\\\\\  ===/// ==\\||  ==|   || ",
			"\\\\\\\\\\\\ ==/||  ==|||  ==|   || ",
			"\\\\\\\\\\\\\\=/|||  ==|||  ==|   || ",
			"\\\\\\\\\\\\\\| |||  ==|||  ==|   || ",
			"-------| \\\\\\ ==/\\\\\\ ===|   || ",
			"                           || ",
			"\\\\    ^   ==//// == \\\\ ==| || ",
			"\\\\\\ ==/\\ ==/|||| ===|\\\\ =|    ",
			"\\\\\\\\=/  \\=/ |||| ===| \\\\=| \\/ ",
			"\\\\\\\\/    v   \\\\\\ == /  \\\\| /\\ ",
		},
		[10]string{
			"\\\\\\\\\\  ===/// ==\\||  ==|   || ",
			"\\\\\\\\\\\\ ==/||  ==|||  ==|   || ",
			"\\\\\\\\\\\\\\=/|||  ==|||  ==|   || ",
			"\\\\\\\\\\\\\\| |||  ==|||  ==|   || ",
			"-------| \\\\\\ ==/\\\\\\ ===|   || ",
			"                           || ",
			"\\\\    ^   ==/// == \\||\\\\ ==|| ",
			"\\\\\\ ==/\\ ==/|||  ==|||\\\\\\ =|  ",
			"\\\\\\\\=/  \\=/ |||  ==||| \\\\\\=|/ ",
			"\\\\\\\\/    v   \\\\ == /||  \\\\\\|\\ ",
		},
	};
	
	// ** set "raw" mode!
	:current_termios termios;
	tcgetattr([int32]0, &current_termios);
	
	:new_termios termios = current_termios;
	:ICANON uint32 = [uint32]2;
	:ECHO uint32 = [uint32]8;
	:new_flags uint32 = ICANON | ECHO;
    new_termios.c_lflag = new_termios.c_lflag & ~new_flags;  

    tcsetattr([int32]0, [int32]0, &new_termios);  // Set new terminal attributes


	//
	// *** "choosing the word" phase ***
	:word_input [30]uint8; 
	:word_len int64 = 0;
	
	while word_len > 30 || word_len <= 0 {
		:buf uint64 = [uint64]0;

		word_len = 0;
		while buf != [uint64]10 { // ENTER for line end!
			printf("\033[2J".data);
			printf("Choose a word and type it, then press enter.\nDon't worry, it's not gonna be visible!\nreading %d/%d\n".data, word_len, word_input.len);

			read([int32]0, &buf, [uint64]8);

			// letter input 
			if buf <= [uint64]122 && buf >= [uint64]97 {
				word_input[word_len] = [uint8]buf;
				word_len = word_len + 1;
			}
		}
	}

	// put word in dynamic array. just as a demonstration that this lagnuage is unusable garbage!!
	:word []uint8 = allocate([uint64]word_len);
	for(:i int64 = 0; i < word_len; i = i + 1) {
		word[i] = word_input[i];
	}

	//
	// *** "guessing the word" phase ***
	:screen [10][30]uint8;

	:impiccato_status int64 = 0;
	//:word string = "appiccicoso";

	if word.len > screen[0].len {
		printf("error: word is too big for the screen width!\n".data);
		return;
	}
	:word_x uint64 = screen[0].len / [uint64]2 - word.len / [uint64]2;
	:word_y uint64 = [uint64]8;

	:tried_letters [8]uint8;
	:found []bool = allocate(word.len);
	:found_count int64 = 0;

	// 0: play;
	// 1: won;
	// -1: lost;
	// 2: quit;
	:game_status int64 = 0;

	while game_status == 0 {
		// write impiccato
		for(:i int64 = 0; i < 10; i = i + 1) {
			:line string = impiccatos[impiccato_status][i];
			for(:j int64 = 0; j < 30; j = j + 1) {
				screen[i][j] = line[j];
			}
		}

		// write tried letters
		for(:i int64 = 0; i < [int64]8; i = i + 1) {
			:c uint8 = tried_letters[i];
			screen[9][i + 15 - 4] = c;
		}

		// write word centered and hide the non-found characters
		for(:i int64 = 0; i < [int64]word.len; i = i + 1) {
			:letter uint8 = word[i];
			:screen_x int64 = i + [int64]word_x;
			if found[i] {
				screen[word_y][screen_x] = letter;
			} else {
				screen[word_y][screen_x] = [uint8]35;
			}
		}

		// render
		render(screen, false);
	
		// wait input
		:buf uint64;
		read([int32]0, &buf, [uint64]8);

		// game controls 
		if buf == [uint64]27 { // ESC
			game_status = 2; // quit
		}

		:c uint8 = [uint8]buf;
		
		// letter input 
		if c <= [uint8]122 && c >= [uint8]97 {
			// *** check input against word *** 

			:current_count int64 = found_count;
			for(:i int64 = 0; i < [int64]word.len; i = i + 1) { 
				if c == word[i] && !found[i] {
					found[i] = true;
					found_count = found_count + 1;
				}
			}

			if found_count == current_count {
				:care bool = true;
				// ** if we already found this letter, we don't care
				for(:i int64 = 0; i < [int64]word.len; i = i + 1) { 
					if c == word[i] && found[i] {
						care = false;
					}
				}
				// ** if we already tried this letter, we don't care
				for(:i int64 = 0; i < [int64]tried_letters.len; i = i + 1) { 
					if c == tried_letters[i] {
						care = false;
					}
				}

				if care {
					// failed
					tried_letters[impiccato_status] = c;
					impiccato_status = impiccato_status + 1;
				}
			}
		}
		
		// *** update status *** 

		if [uint64]found_count >= word.len {
			game_status = 1; // win
		}

		// break the loop
		if impiccato_status >= 8 {
			game_status = -1; // lose
		}
	}

	while game_status == 1 {
		:poll_struct pollfd;
		poll_struct.fd = [int32]0;
		poll_struct.events = [int16]1;
		poll_struct.revents = [int16]0;

		for(:f int64 = 0; f < 4; f = f + 1) {
			:win_frame [10]string = win_screen[f];
			for(:i int64 = 0; i < 10; i = i + 1) {
				:line string = win_frame[i];
				for(:j int64 = 0; j < 30; j = j + 1) {
					screen[i][j] = line[j];
				}
			}

			render(screen, true);
			
			// sleep for 1 second
			poll(&poll_struct, [int32]1, [int32]1000);
				
			if poll_struct.revents != [int16]0 {
				if poll_struct.revents & [int16]1 != [int16]0 {
					:c uint8;
					read([int32]0, &c, [uint64]1);

					if c == [uint8]27 { // ESC
						game_status = 2; // quit
					}
				} else {
					printf("read error from stdin!".data);
				}
			}
		}
		
	}


	tcsetattr([int32]0, [int32]0, &current_termios);  // Restore!
}
