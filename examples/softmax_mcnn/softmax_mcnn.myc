/*
	we rapresent numbers as binary vector of size 10 (0-9)
	the image is big 256x256 grey-scale pixels, so...
	
		first layer has 10 neurons with how many weights?
		28*28 = 784 weights
	

*/

@import "lib/c/stdio.myc"
@import "lib/memory.myc"

//  ssize_t read(int fd, void *buf, size_t count);
function read(:fd int32, :buf *?, :count uint64) uint64 external;

// int open(const char *pathname, int flags, mode_t mode);
function open(:pathname *uint8, :flags int32, :mode uint32) int32 external;

function flip32(:x uint32) uint32{
	:flipped uint32 = 0;
	
	flipped |= (x & (0xFF << 0 )) << 24;
	flipped |= (x & (0xFF << 8 )) << 8 ;
	flipped |= (x & (0xFF << 16)) >> 8 ;
	flipped |= (x & (0xFF << 24)) >> 24;

	return flipped;
}

function read_dataset_image(:filename string) [][28][28]uint8 {
	// open file read-only
	:fd int32 = open(filename.data, 0, 0);
	if fd < 0 {
		printf("error: could not opend file `%s`!".data, filename.data);
		return;
	}

	// magic value
	:magic_value uint32;
	:n uint64 = read(fd, &magic_value, 4);
	if n < 4 {
		printf("error: could not read file in memory!\n".data);
		return;
	}
	magic_value = flip32(magic_value);
	printf("magic number: %x\n".data, magic_value);

	// number of images
	:number_of_images uint32;
	n = read(fd, &number_of_images, 4);
	if n < 4 {
		printf("error: could not read file in memory!\n".data);
		return;
	}
	number_of_images = flip32(number_of_images);
	printf("number of images in set: %d\n".data, number_of_images);

	// number of rows
	:number_of_rows uint32;
	n = read(fd, &number_of_rows, 4);
	if n < 4 {
		printf("error: could not read file in memory!\n".data);
		return;
	}
	number_of_rows = flip32(number_of_rows);
	printf("number of rows in set: %d\n".data, number_of_rows);
	
	// number of columns
	:number_of_columns uint32;
	n = read(fd, &number_of_columns, 4);
	if n < 4 {
		printf("error: could not read file in memory!\n".data);
		return;
	}
	number_of_columns = flip32(number_of_columns);
	printf("number of columns in set: %d\n".data, number_of_columns);

	:number_of_pixels uint32 = number_of_images * number_of_rows * number_of_columns;
	printf("number of pixels in set: %d\n".data, number_of_pixels);

	:images [][28][28]uint8 = allocate([uint64]number_of_pixels);
	for(:i uint32 = 0; i < number_of_images; i++) {
		n = read(fd, images[i].data, ([uint64]number_of_rows * [uint64]number_of_columns));
		if n < ([uint64]number_of_rows * [uint64]number_of_columns) {
			printf("error: could not read file in memory!\n".data);
			return;
		}
	}
	
	return images;
}

function read_dataset_label(:filename string) []uint8 {
	// open file read-only
	:fd int32 = open(filename.data, 0, 0);
	if fd < 0 {
		printf("error: could not opend file `%s`!".data, filename.data);
		return;
	}

	// magic value
	:magic_value uint32;
	:n uint64 = read(fd, &magic_value, 4);
	if n < 4 {
		printf("error: could not read file in memory!\n".data);
		return;
	}
	magic_value = flip32(magic_value);
	printf("magic number: %x\n".data, magic_value);

	// number of labels
	:number_of_labels uint32;
	n = read(fd, &number_of_labels, 4);
	if n < 4 {
		printf("error: could not read file in memory!\n".data);
		return;
	}
	number_of_labels = flip32(number_of_labels);
	printf("number of labels in set: %d\n".data, number_of_labels);

	:labels []uint8 = allocate([uint64]number_of_labels);
	n = read(fd, labels.data, [uint64]number_of_labels);
	if n < [uint64]number_of_labels {
		printf("error: could not read file in memory!\n".data);
		return;
	}
	
	return labels;
}

/*
function matmul(:a [28][28]uint32, :b [28][28]uint32) [28][28]uint32 {
	:ah uint64 = a.len;
	if ah <= 0 {
		return;
	}
	:aw uint64 = a[0].len;
	if aw <= 0 {
		return;
	}
	
	:bh uint64 = b.len;
	if bh <= 0 {
		return;
	}
	:bw uint64 = b[0].len;
	if bw <= 0 {
		return;
	}

	if aw != bh {
		return;
	}

	:c [28][28]uint32; 

	for(:i int32 = 0; i < [int32]ah; i++) {
		for(:j int32 = 0; j < [int32]aw; j++) {
			for(:k int32 = 0; k < [int32]aw; k++) {
				c[i][j] += a[k][i] * b[k][j];
			}
		}
	}

	return c;
} 
*/

function vecmul(:a []f32, :b []f32) f32 {
	if a.len != b.len {
		return;
	}

	:res f32;
	for(:i int32 = 0; i < [int32]a.len; i++) {
		res += a[i] * b[i];
	}

	res
}

struct Neuron {
	:weights [784]f32;
	:bias 		  f32;
}

function nn(:levels uint32) [][10]Neuron {
	:network [][10]Neuron = allocate([uint64]levels * 10 * 785 * 4);

	return network;
}

/*
function exp(:x f32) f32 {
	:e f32 = 2.71828;
	:res f32 = 1.0;

	// 3 is a very good approximation of e
	for(:i int32 = 0; i < x; i++) {
		printf("res : %f\n".data, [f64]res);
		res *= e;
	}
	for(:i int32 = 0; i > x; i--) {
		printf("res : %f\n".data, [f64]res);
		res /= e;
	}

	res
}
*/

//float expf(float x);
function expf(:x f32) f32 external;

function logistic(:x f32) f32 {
	printf("x : %f\n".data, [f64]x);

	:nominator f32 = 1.0;
	:denominator f32 = 1.0 + expf(-x);
	printf("nominator: %g\n".data, [f64]nominator);
	printf("denominator: %g\n".data, [f64]denominator);

	:sigmoid f32 = nominator / denominator;
	return sigmoid;
}

function softmax(:z []f32, :i int32) f32 {
	:denominator f32 = 0.0;	
	for(:j uint64 = 0; j < z.len; j++) {
		printf("x[%u] = %f\n".data, j, [f64]z[j]);
		denominator += z[j];
	}

	printf("denominator: %f\n".data, [f64]denominator);
	
	z[i] / denominator
}

function forward(:net [][10]Neuron, :x [784]f32) [10]f32 {
	printf("nett.len == %llu\n".data, net.len);
	printf("x.len == %llu\n".data, x.len);

	:first_layer [10]Neuron = net[0];
	:first_layer_out [10]f32;

	printf("net[0].len == %llu\n".data, first_layer.len);
	printf("net[0][0].weights.data == %llx\n".data, first_layer[0].weights.data);
	printf("net[0][0].weights[0] == %f\n".data, [f64]first_layer[0].weights[0]);

	for(:n int32 = 0; n < [int32]first_layer.len; n++) {
		printf("weights:\n".data);
		for(:r uint32 = 0; r < 28; r++) {
			for(:c uint32 = 0; c < 28; c++) {
				printf("%f ".data, [f64]first_layer[n].weights[r * 28 + c]);
			}
			printf("\n".data);
		}

		printf("input:\n".data);
		for(:r uint32 = 0; r < 28; r++) {
			for(:c uint32 = 0; c < 28; c++) {
				printf("%f ".data, [f64]x[r * 28 + c]);
			}
			printf("\n".data);
		}

		printf("bias: %f\n".data, [f64]first_layer[n].bias);

		// ** linear part **
		// z = wt * x + b
		:z f32 = vecmul(first_layer[n].weights, x);

		z += first_layer[n].bias;

		// ** activation function **
		:l f32 = logistic(z);
		first_layer_out[n] = l;
		printf("logistic: %f\n".data, [f64]first_layer_out[n]);
	}

	
	:first_layer_out_distributed [10]f32;
	for(:n int32 = 0; n < [int32]first_layer.len; n++) {
		// ** softmax **
		first_layer_out_distributed[n] = softmax(first_layer_out, n);
	}

	first_layer_out_distributed
}

function main() {
	:images [][28][28]uint8 = read_dataset_image("./examples/softmax_mcnn/train-images-idx3-ubyte");
	:labels []     uint8 = read_dataset_label("./examples/softmax_mcnn/train-labels-idx1-ubyte");
	
	printf("%llx\n".data, images.len);

	// cast image set to f32
	:image_set [][784]f32 = allocate(28*28*images.len*4);
	for(:i uint32 = 0; i < [uint32]image_set.len; i++) {
		for(:r uint32 = 0; r < 28; r++) {
			for(:c uint32 = 0; c < 28; c++) {
				:pixel uint8 = images[i][r][c];
				if pixel > 0 {
					image_set[i][r * 28 + c] = 1.0 / [f32]pixel;
				}
			}
		}
	}
	
	
	:neural_network [][10]Neuron = nn(1);
	printf("neural_network.len: %d\n".data, neural_network.len);

	// write ones in weights
	for(:i int32 = 0; i < [int32]neural_network[0].len; i++) {
		for(:j int32 = 0; j < [int32]neural_network[0][i].weights.len; j++) {
			neural_network[0][i].weights[j] = 1.0;
		}
		neural_network[0][i].bias = 1.0;
	}
		
	:probability_distribution [10]f32 = forward(neural_network, image_set[5]);
	for(:n int32 = 0; n < [int32]probability_distribution.len; n++) {
		printf("probability[%u]: %f\n".data, n, [f64]probability_distribution[n]);
	}

	return;
	
	
	/*
	for(:i int32 = 0; i < [int32]neural_network.len; i++) {
		for(:j int32 = 0; j < [int32]neural_network[i].len; j++) {
			:w []f32 = neural_network[i][j].weights;
			:b f32 = neural_network[i][j].bias;
	
			for(:k int32 = 0; k < [int32](w.len); k++) {
				printf("neuron[%d][%d].weights[%d]: %u\n".data, i, j, k, w[k]);
			}
			printf("neuron[%d][%d].bias: %u\n".data, i, j, b);
		}
	}
	

	for(:i uint32 = 0; i < [uint32]images.len; i++) {
		printf("label: %hhu\n".data, labels[i]);
		for(:r uint32 = 0; r < 28; r++) {
			for(:c uint32 = 0; c < 28; c++) {
				:image uint32 = i;
				:p uint8 = [uint8]image_set[image][r * 28 + c];
	
				if p > 5 {
					putchar('@');
				} else {
					putchar(' ');
				}
			}
			putchar('\n');
		}
	}
*/
}
