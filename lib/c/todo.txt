asctime	time.h	char *asctime(const struct tm *time);	Converts the time that is stored as a structure to a character string.
asctime_r	time.h	char *asctime_r (const struct tm *tm, char *buf);	Converts tm that is stored as a structure to a character string. (Restartable version of asctime.)
btowc	
wchar.h
wint_t btowc(int c);	Determines whether c constitues a valid multibyte character in the initial shift state.
catclose6	nl_types.h	int catclose (nl_catd catd);	Closes a previously opened message catalog.
catgets6	nl_types.h	char *catgets(nl_catd catd, int set_id, int msg_id, const char *s);	Retrieves a message from an open message catalog.
catopen6	nl_types.h	nl_catd catopen (const char *name, int oflag);	Opens a message catalog, which must be done before a message can be retrieved.
clock	time.h	clock_t clock(void);	Returns the processor time that has elapsed since the job was started.
ctime	time.h	char *ctime(const time_t *time);	Converts time to a character string.
ctime64	time.h	char *ctime64(const time64_t *time);	Converts time to a character string.
ctime_r	time.h	char *ctime_r(const time_t *time, char *buf);	Converts time to a character string. (Restartable version of ctime.)
ctime64_r	time.h	char *ctime64_r(const time64_t *time, char *buf);	Converts time to a character string. (Restartable version of ctime64.)
fgetwc6	
wchar.h
wint_t fgetwc(FILE *stream);	Reads the next multibyte character from the input stream pointed to by stream.
fgetws6	
wchar.h
wchar_t *fgetws(wchar_t *wcs, int n, FILE *stream);	Reads wide characters from the stream into the array pointed to by wcs.
fputwc6	
wchar.h
wint_t fputwc(wchar_t wc, FILE *stream);	Converts the wide character wc to a multibyte character and writes it to the output stream pointed to by stream at the current position.
fputws6	
wchar.h
int fputws(const wchar_t *wcs, FILE *stream);	Converts the wide-character string wcs to a multibyte-character string and writes it to stream as a multibyte character string.
fwide6	
wchar.h
int fwide(FILE *stream, int mode);	Determines the orientation of the stream pointed to by stream.
fwprintf6	
wchar.h
int fwprintf(FILE *stream, const wchar_t *format, arg-list);	Writes output to the stream pointed to by stream.
fwscanf6	
wchar.h
int fwscanf(FILE *stream, const wchar_t *format, arg-list)	Reads input from the stream pointed to by stream.
getwc6	
wchar.h
wint_t getwc(FILE *stream);	Reads the next multibyte character from stream, converts it to a wide character and advances the associated file position indicator for stream.
getwchar6	wchar.h	wint_t getwchar(void);	Reads the next multibyte character from stdin, converts it to a wide character, and advances the associated file position indicator for stdin.
gmtime	time.h	struct tm *gmtime(const time_t *time);	Converts a time value to a structure of type tm.
gmtime64	time.h	struct tm *gmtime64(const time64_t *time);	Converts a time value to a structure of type tm.
gmtime_r	time.h	struct tm *gmtime_r (const time_t *time, struct tm *result);	Converts a time value to a structure of type tm. (Restartable version of gmtime.)
gmtime64_r	time.h	struct tm *gmtime64_r (const time64_t *time, struct tm *result);	Converts a time value to a structure of type tm. (Restartable version of gmtime64.)
isalnum	ctype.h	int isalnum(int c);	Tests if c is alphanumeric.
isalpha	ctype.h	int isalpha(int c);	Tests if c is alphabetic.
isascii4	ctype.h	int isascii(int c);	Tests if c is within the 7-bit US-ASCII range.
isblank	ctype.h	int isblank(int c);	Tests if c is a blank or tab character.
iscntrl	ctype.h	int iscntrl(int c);	Tests if c is a control character.
isdigit	ctype.h	int isdigit(int c);	Tests if c is a decimal digit.
isgraph	ctype.h	int isgraph(int c);	Tests if c is a printable character excluding the space.
islower	ctype.h	int islower(int c);	Tests if c is a lowercase letter.
isprint	ctype.h	int isprint(int c);	Tests if c is a printable character including the space.
ispunct	ctype.h	int ispunct(int c);	Tests if c is a punctuation character.
isspace	ctype.h	int isspace(int c);	Tests if c is a whitespace character.
isupper	ctype.h	int isupper(int c);	Tests if c is an uppercase letter.
iswalnum4	wctype.h	int iswalnum (wint_t wc);	Checks for any alphanumeric wide character.
iswalpha4	wctype.h	int iswalpha (wint_t wc);	Checks for any alphabetic wide character.
iswblank4	wctype.h	int iswblank (wint_t wc);	Checks for any blank or tab wide character.
iswcntrl4	wctype.h	int iswcntrl (wint_t wc);	Tests for any control wide character.
iswctype4	wctype.h	int iswctype(wint_t wc, wctype_t wc_prop);	Determines whether or not the wide character wc has the property wc_prop.
iswdigit4	wctype.h	int iswdigit (wint_t wc);	Checks for any decimal-digit wide character.
iswgraph4	wctype.h	int iswgraph (wint_t wc);	Checks for any printing wide character except for the wide-character space.
iswlower4	wctype.h	int iswlower (wint_t wc);	Checks for any lowercase wide character.
iswprint4	wctype.h	int iswprint (wint_t wc);	Checks for any printing wide character.
iswpunct4	wctype.h	int iswpunct (wint_t wc);	Test for a wide non-alphanumeric, non-space character.
iswspace4	wctype.h	int iswspace (wint_t wc);	Checks for any wide character that corresponds to an implementation-defined set of wide characters for which iswalnum is false.
iswupper4	wctype.h	int iswupper (wint_t wc);	Checks for any uppercase wide character.
iswxdigit4	wctype.h	int iswxdigit (wint_t wc);	Checks for any hexadecimal digit character.
isxdigit4	wctype.h	int isxdigit(int c);	Tests if c is a hexadecimal digit.
localeconv	locale.h	struct lconv *localeconv(void);	Formats numeric quantities in struct lconv according to the current locale.
localtime	time.h	struct tm *localtime(const time_t *timeval);	Converts timeval to a structure of type tm.
localtime64	time.h	struct tm *localtime64(const time64_t *timeval);	Converts timeval to a structure of type tm.
localtime_r	time.h	struct tm *localtime_r (const time_t *timeval, struct tm *result);	Converts a time value to a structure of type tm. (Restartable version of localtime.)
localtime64_r	time.h	struct tm *localtime64_r (const time64_t *timeval, struct tm *result);	Converts a time value to a structure of type tm. (Restartable version of localtime64.)
longjmp	setjmp.h	void longjmp(jmp_buf env, int value);	Restores a stack environment previously set in env by the setjmp function.
mbrlen4	wchar.h	int mbrlen (const char *s, size_t n, mbstate_t *ps);	Determines the length of a multibyte character. (Restartable version of mblen.)
mbrtowc4	wchar.h	int mbrtowc (wchar_t *pwc, const char *s, size_t n, mbstate_t *ps);	Convert a multibyte character to a wide character (Restartable version of mbtowc.)
mbsinit4	wchar.h	int mbsinit (const mbstate_t *ps);	Test state object *ps for initial state.
mbsrtowcs4	wchar.h	size_t mbsrtowc (wchar_t *dst, const char **src, size_t len, mbstate_t *ps);	Convert multibyte string to a wide character string. (Restartable version of mbstowcs.)
memchr	string.h	void *memchr(const void *buf, int c, size_t count);	Searches the first count bytes of buf for the first occurrence of c converted to an unsigned character.
memcmp	string.h	int memcmp(const void *buf1, const void *buf2, size_t count);	Compares up to count bytes of buf1 and buf2.
memcpy	string.h	void *memcpy(void *dest, const void *src, size_t count);	Copies count bytes of src to dest.
memmove	string.h	void *memmove(void *dest, const void *src, size_t count);	Copies count bytes of src to dest. Allows copying between objects that overlap.
memset	string.h	void *memset(void *dest, int c, size_t count);	Sets count bytes of dest to a value c.
mktime	time.h	time_t mktime(struct tm *time);	Converts local time into calendar time.
mktime64	time.h	time64_t mktime64(struct tm *time);	Converts local time into calendar time.
nl_langinfo4	langinfo.h	char *nl_langinfo(nl_item item);	Retrieve from the current locale the string that describes the requested information specified by item.
putwc6	
wchar.h
wint_t putwchar(wchar_t wc, FILE *stream);	Converts the wide character wc to a multibyte character, and writes it to the stream at the current position.
putwchar6	wchar.h	wint_t putwchar(wchar_t wc);	Converts the wide character wc to a multibyte character and writes it to stdout.
raise	signal.h	int raise(int sig);	Sends the signal sig to the running program.
regcomp	regex.h	int regcomp(regex_t *preg, const char *pattern, int cflags);	Compiles the source regular expression pointed to by pattern into an executable version and stores it in the location pointed to by preg.
regerror	regex.h	size_t regerror(int errcode, const regex_t *preg, char *errbuf, size_t errbuf_size);	Finds the description for the error code errcode for the regular expression preg.
regexec	regex.h	int regexec(const regex_t *preg, const char *string, size_t nmatch, regmatch_t *pmatch, int eflags);	Compares the null-ended string string against the compiled regular expression preg to find a match between the two.
regfree	regex.h	void regfree(regex_t *preg);	Frees any memory that was allocated by regcomp to implement the regular expression preg.
setjmp	setjmp.h	int setjmp(jmp_buf env);	Saves a stack environment that can be subsequently restored by longjmp.
setlocale	locale.h	char *setlocale(int category, const char *locale);	Changes or queries variables defined in the locale.
signal	signal.h	void(*signal (int sig, void(*func)(int))) (int);	Registers func as a signal handler for the signal sig.
strcasecmp	strings.h	int srtcasecmp(const char *string1, const char *string2);	Compares strings without case sensitivity.
strcat	string.h	char *strcat(char *string1, const char *string2);	Concatenates string2 to string1.
strchr	string.h	char *strchr(const char *string, int c);	Locates the first occurrence of c in string.
strcmp	string.h	int strcmp(const char *string1, const char *string2);	Compares the value of string1 to string2.
strcoll	string.h	int strcoll(const char *string1, const char *string2);	Compares two strings using the collating sequence in the current locale.
strcpy	string.h	char *strcpy(char *string1, const char *string2);	Copies string2 into string1.
strcspn	string.h	size_t strcspn(const char *string1, const char *string2);	Returns the length of the initial substring of string1 consisting of characters not contained in string2.
strerror	string.h	char *strerror(int errnum);	Maps the error number in errnum to an error message string.
strfmon4	wchar.h	int strfmon (char *s, size_t maxsize, const char *format, ...);	Converts monetary value to string.
strftime	time.h	size_t strftime (char *dest, size_t maxsize, const char *format, const struct tm *timeptr);	Stores characters in an array pointed to by dest, according to the string determined by format.
strlen	string.h	size_t strlen(const char *string);	Calculates the length of string.
strncasecmp	strings.h	int strncasecmp(const char *string1, const char *string2, size_t count);	Compares strings without case sensitivity.
strncat	string.h	char *strncat(char *string1, const char *string2, size_t count);	Concatenates up to count characters of string2 to string1.
strncmp	string.h	int strncmp(const char *string1, const char *string2, size_t count);	Compares up to count characters of string1 and string2.
strncpy	string.h	char *strncpy(char *string1, const char *string2, size_t count);	Copies up to count characters of string2 to string1.
strpbrk	string.h	char *strpbrk(const char *string1, const char *string2);	Locates the first occurrence in string1 of any character in string2.
strptime4	time.h	char *strptime (const char *buf, const char *format, struct tm *tm);	Date and time conversion
strrchr	string.h	char *strrchr(const char *string, int c);	Locates the last occurrence of c in string.
strspn	string.h	size_t strspn(const char *string1, const char *string2);	Returns the length of the initial substring of string1 consisting of characters contained in string2.
strstr	string.h	char *strstr(const char *string1, const char *string2);	Returns a pointer to the first occurrence of string2 in string1.
strtok	string.h	char *strtok(char *string1, const char *string2);	Locates the next token in string1 delimited by the next character in string2.
strtok_r	string.h	char *strtok_r(char *string, const char *seps, char **lasts);	Locates the next token in string delimited by the next character in seps. (Restartable version of strtok.)
strxfrm	string.h	size_t strxfrm(char *string1, const char *string2, size_t count);	Converts string2 and places the result in string1. The conversion is determined by the program's current locale.
swprintf	wchar.h	int swprintf(wchar_t *wcsbuffer, size_t n, const wchar_t *format, arg-list);	Formats and stores a series of wide characters and values into the wide-character buffer wcsbuffer.
swscanf	wchar.h	int swscanf (const wchar_t *buffer, const wchar_t *format, arg-list)	Reads data from buffer into the locations given by arg-list.
time	time.h	time_t time(time_t *timeptr);	Returns the current calendar time.
time64	time.h	time64_t time64(time64_t *timeptr);	Returns the current calendar time.
toascii	ctype.h	int toascii(int c);	Converts c to a character in the 7-bit US-ASCII character set.
tolower	ctype.h	int tolower(int c);	Converts c to lowercase.
toupper	ctype.h	int toupper(int c);	Converts c to uppercase.
towctrans	wctype.h	wint_t towctrans(wint_t wc, wctrans_t desc);	Translates the wide character wc based on the mapping described by desc.
towlower4	wctype.h	wint_t towlower (wint_t wc);	Converts uppercase letter to lowercase letter.
towupper4	wctype.h	wint_t towupper (wint_t wc);	Converts lowercase letter to uppercase letter.
ungetwc6	
wchar.h
wint_t ungetwc(wint_t wc, FILE *stream);	Pushes the wide character wc back onto the input stream.
va_arg	stdarg.h	var_type va_arg(va_list arg_ptr, var_type);	Returns the value of one argument and modifies arg_ptr to point to the next argument.
va_copy	stdarg.h	void va_copy(va_list dest, va_list src);	Initializes dest as a copy of src.
va_end	stdarg.h	void va_end(va_list arg_ptr);	Facilitates normal return from variable argument list processing.
va_start	stdarg.h	void va_start(va_list arg_ptr, variable_name);	Initializes arg_ptr for subsequent use by va_arg and va_end.
vfwprintf6	
stdarg.h
wchar.h
int vfwprintf(FILE *stream, const wchar_t *format, va_list arg);	Equivalent to fwprintf, except that the variable argument list is replaced by arg.
vswprintf	
stdarg.h
wchar.h
int vswprintf(wchar_t *wcsbuffer, size_t n, const wchar_t *format, va_list arg);	Formats and stores a series of wide characters and values in the buffer wcsbuffer.
vwprintf6	
stdarg.h
wchar.h
int vwprintf(const wchar_t *format, va_list arg);	Equivalent to wprintf, except that the variable argument list is replaced by arg.
wcrtomb4	wchar.h	int wcrtomb (char *s, wchar_t wchar, mbstate_t *pss);	Converts a wide character to a multibyte character. (Restartable version of wctomb.)
wcscat	wchar.h	wchar_t *wcscat(wchar_t *string1, const wchar_t *string2);	Appends a copy of the string pointed to by string2 to the end of the string pointed to by string1.
wcschr	wchar.h	wchar_t *wcschr(const wchar_t *string, wchar_t character);	Searches the wide-character string pointed to by string for the occurrence of character.
wcscmp	wchar.h	int wcscmp(const wchar_t *string1, const wchar_t *string2);	Compares two wide-character strings, *string1 and *string2.
wcscoll4	wchar.h	int wcscoll (const wchar_t *wcs1, const wchar_t *wcs2);	Compares two wide-character strings using the collating sequence in the current locale.
wcscpy	wchar.h	wchar_t *wcscpy(wchar_t *string1, const wchar_t *string2);	Copies the contents of *string2 (including the ending wchar_t null character) into *string1.
wcscspn	wchar.h	size_t wcscspn(const wchar_t *string1, const wchar_t *string2);	Determines the number of wchar_t characters in the initial segment of the string pointed to by *string1 that do not appear in the string pointed to by *string2.
wcsftime	wchar.h	size_t wcsftime(wchar_t *wdest, size_t maxsize, const wchar_t *format, const struct tm *timeptr);	Converts the time and date specification in the timeptr structure into a wide-character string.
wcslen	wchar.h	size_t wcslen(const wchar_t *string);	Computes the number of wide-characters in the string pointed to by string.
wcslocaleconv	locale.h	struct wcslconv *wcslocaleconv(void);	Formats numeric quantities in struct wcslconv according to the current locale.
wcsncat	wchar.h	wchar_t *wcsncat(wchar_t *string1, const wchar_t *string2, size_t count);	Appends up to count wide characters from string2 to the end of string1, and appends a wchar_t null character to the result.
wcsncmp	wchar.h	int wcsncmp(const wchar_t *string1, const wchar_t *string2, size_t count);	Compares up to count wide characters in string1 to string2.
wcsncpy	wchar.h	wchar_t *wcsncpy(wchar_t *string1, const wchar_t *string2, size_t count);	Copies up to count wide characters from string2 to string1.
wcspbrk	wchar.h	wchar_t *wcspbrk(const wchar_t *string1, const wchar_t *string2);	Locates the first occurrence in the string pointed to by string1 of any wide characters from the string pointed to by string2.
wcsptime	wchar.h	wchar_t *wcsptime ( const wchar_t *buf, const wchar_t *format, struct tm *tm );	Date and time conversion. Equivalent to strptime(), except that it uses wide characters.
wcsrchr	wchar.h	wchar_t *wcsrchr(const wchar_t *string, wchar_t character);	Locates the last occurrence of character in the string pointed to by string.
wcsrtombs4	wchar.h	size_t wcsrtombs (char *dst, const wchar_t **src, size_t len, mbstate_t *ps);	Converts wide character string to multibyte string. (Restartable version of wcstombs.)
wcsspn	wchar.h	size_t wcsspn(const wchar_t *string1, const wchar_t *string2);	Computes the number of wide characters in the initial segment of the string pointed to by string1, which consists entirely of wide characters from the string pointed to by string2.
wcsstr	wchar.h	wchar_t *wcsstr(const wchar_t *wcs1, const wchar_t *wcs2);	Locates the first occurrence of wcs2 in wcs1.
wcstok	wchar.h	wchar_t *wcstok(wchar_t *wcs1, const wchar_t *wcs2, wchar_t **ptr)	Breaks wcs1 into a sequence of tokens, each of which is delimited by a wide character from the wide string pointed to by wcs2.
wcstol	wchar.h	long int wcstol(const wchar_t *nptr, wchar_t **endptr, int base);	Converts the initial portion of the wide-character string pointed to by nptr to a long integer value.
wcstoul	wchar.h	unsigned long int wcstoul(const wchar_t *nptr, wchar_t **endptr, int base);	Converts the initial portion of the wide-character string pointed to by nptr to an unsigned long integer value.
wcsxfrm4	wchar.h	size_t wcsxfrm (wchar_t *wcs1, const wchar_t *wcs2, size_t n);	Transforms a wide-character string to values which represent character collating weights and places the resulting wide-character string into an array.
wctob	
stdarg.h
wchar.h
int wctob(wint_t wc);	Determines whether wc corresponds to a member of the extended character set whose multibyte character representation is a single byte when in the initial shift state.
wctrans	wctype.h	wctrans_t wctrans(const char *property);	Constructs a value with type wctrans_t that describes a mapping between wide characters identified by the string argument property.
wctype4	wchar.h	wctype_t wctype (const char *property);	Obtains handle for character property classification.
wcwidth	wchar.h	int wcswidth(const wchar_t *pwcs, size_t n);	Determine the display width of a wide character string.
wmemchr	wchar.h	wchar_t *wmemchr(const wchar_t *s, wchar_t c, size_t n);	Locates the first occurrence of c in the initial n wide characters of the object pointed to by s.
wmemcmp	wchar.h	int wmemcmp(const wchar_t *s1, const wchar_t *s2, size_t n);	Compares the first n wide characters of the object pointed to by s1 to the first n characters of the object pointed to by s2.
wmemcpy	wchar.h	wchar_t *wmemcpy(wchar_t *s1, const wchar_t *s2, size_t n);	Copies n wide characters from the object pointed to by s2 to the object pointed to by s1.
wmemmove	wchar.h	wchar_t *wmemmove(wchar_t *s1, const wchar_t *s2, size_t n);	Copies n wide characters from the object pointed to by s2 to the object pointed to by s1.
wmemset	wchar.h	wchar_t *wmemset(wchar_t *s, wchar_t c, size_t n);	Copies the value of c into each of the first n wide characters of the object pointed to by s.
wprintf6	wchar.h	int wprintf(const wchar_t *format, arg-list);	Equivalent to fwprintf with the argument stdout interposed before the arguments to wprintf.
wscanf6	wchar.h	int wscanf(const wchar_t *format, arg-list);	Equivalent to fwscanf with the argument stdin interposed before the arguments of wscanf.
